Ticket-Management-System

About: 
Dies ist ein Ticket-System, das mit Rust und MySQL entwickelt wurde. Es ermöglicht Benutzern, Tickets zu erstellen, die dann in einer MySQL-Datenbank gespeichert werden. Das System verwendet Docker-Container für die Datenbank und die Weboberfläche.
Es dient dem Gymnasium Harksheide als Ticket-System für die Vereinfachung der Schulabläufe im Sinne der Digitalisierung. Hierbei handelt es sich um ein Abschlussprojekt eines Schülers, welche es im Rahmen der Besonderen Lernleistung (BLL) im Fach Informatik erstellt hat.
Es wurde angefangen als Verbesserung der alten Systeme + besserer Zuschnitt auf die Bedürfnisse der Schule.
Andere Systeme können dieses System sicherlich auch verwenden, jedoch ist es spezieller auf die Bedürfnisse des Gymnasiums Harksheide zugeschnitten.

Voraussetzungen für den Server
(Diese Programme müssen nur einmal installiert werden, um den Server neu aufzusetzen.)

Rust (Programmiersprache für das Backend)
Rust ist notwendig, um den Server starten zu können.
Installieren Sie Rust über die offizielle Webseite:
https://www.rust-lang.org/tools/install

Mit Rust werden automatisch mit installiert:
Cargo: verwaltet die Rust-Projekte
rustc: übersetzt den Rust-Code in ausführbare Programme
rustup: verwaltet die Rust-Versionen

Docker (Umgebung für das System)
Docker wird verwendet, um die Datenbank und den Webserver bereitzustellen.
Installieren Sie Docker hier:
https://docs.docker.com/get-docker/

Docker-Compose
Zusatztool für Docker, um alles einfacher starten zu können.
Installation:
https://docs.docker.com/compose/install/

Alternativ kann auch Docker Desktop verwendet werden (für Windows/Mac empfohlen):
https://www.docker.com/products/docker-desktop

Verwendete Programme
Rust: siehe oben

MySQL: Datenbank.
PHPMyAdmin: Verwaltungstool für die MySQL-Datenbank (optional, aber am Anfang hilfreich)
Nginx: Webserver zum Anzeigen der Webseite.

Frontend-Sprachen
HTML: Struktur der Webseite
CSS: Gestaltung und Farben
JavaScript: Programmlogik auf der Webseite
Diese drei Sprachen laufen direkt im Browser und benötigen keine Installation.


Wie wird das Ticket-System gestartet?
1. Projekt herunterladen
Laden Sie das Projekt von GitHub herunter:
https://github.com/Backwardpen/Ticket-Management-System
→ Entweder mit einem Klick auf "Code" → "Download ZIP"
→ Oder über das Terminal mit:
git clone https://github.com/Backwardpen/Ticket-Management-System

2. IP-Adressen anpassen (nur bei Serverbetrieb wichtig)
Damit das System auf einem Server funktioniert, müssen in ein paar Dateien die Platzhalter durch die echte IP-Adresse des Servers ersetzt werden.
→ Die IP-Adresse erfährt man z. B. mit dem Terminalbefehl:
ip addr

→ Danach bitte folgende Dateien öffnen und die IP ersetzen:
viewTicket.js, userManagement.js, editTicket.js, dashboard.js, archived.js
index.html, createTicket.html
main.rs (Backend-Datei)

Hinweis: Wenn das System nur lokal getestet wird, ist das in der Regel nicht nötig.

3. In den Projektordner wechseln
Im Terminal:
cd Ticket-Management-System

4. Die Systemumgebung starten (MySQL, Webserver usw.)
Das passiert am einfachsten über Docker.
Nutzen Sie dazu diesen Befehl:
docker-compose up --build -d
→ Beim ersten Mal wird alles automatisch eingerichtet.
→ Später reicht:
docker-compose up -d

Um das System wieder zu stoppen:
docker-compose down

5. Rust-Server starten (Backend)
Wechseln Sie ins Backend-Verzeichnis und starten Sie den Server:
cd backend
cargo run

6. Ticket-System im Browser öffnen
Gehen Sie im Browser auf:
http://localhost:8080

Oder (wenn auf einem Server):
http://<Server-IP>:8080

7. Standard-Login für Administrator
E-Mail: Beispiel@gmail.com
Passwort: Test123

Diese Zugangsdaten befinden sich in der .env-Datei und können/sollten dort geändert werden.



Vorgefertigter Test für die MySQL-Datenbank, falls man dies überprüfen möchte:
Testüberprüfungsbefehl für die MySQL-Datenbank in der MySQL-Console:
USE ticketsystem;
INSERT INTO tickets (title, email, name, description, raum) 
VALUES ("Test Title", "test@example.com", "Test User", "Test Description", "E01");


Als Hintergrundinformation:
https://www.youtube.com/watch?v=HVKizgcfjo
https://www.raghwendra.com/blog/ow-to-connect-html-to-database-with-mysql-using-php-example/#Step_1_Filter_your_HTML_form_requirements_for_your_contact_us_web_page
https://medium.com/@elaurichetoh/unlock-the-power-of-docker-effortlessly-run-mysql-and-phpmyadmin-containers-for-seamless-database-3d56fd496c4d
https://www.w3schools.com/howto
