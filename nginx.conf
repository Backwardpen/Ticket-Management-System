worker_processes 1;

# Events sind für die Verarbeitung von Verbindungen zuständig und können je nach Serverlast angepasst werden.
# Hier werden 1024 Verbindungen pro Worker-Prozess erlaubt. (Der Worker-Prozess ist hier auf 1 gesetzt)
events {
    worker_connections 1024;
}

# HTTP-Block für die Konfiguration des Webservers
# Hier wird der Server konfiguriert, um HTTP-Anfragen zu verarbeiten.
# Der Server wird auf Port 80 lauschen und die Anfragen an den richtigen Ort weiterleiten.
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logformat für den Zugriff auf den Server
    # Hier wird das Format der Zugriffsprotokolle definiert.
    # keepalive_timeout steht für die Zeit, die der Server wartet, bevor er eine Verbindung schließt.
    sendfile        on;
    keepalive_timeout  65;

    server {
        # Hier wird der Server konfiguriert, um auf Port 80 zu lauschen.
        # Der Servername ist localhost, was bedeutet, dass er auf Anfragen an localhost reagiert.
        listen       80;
        server_name  localhost;

        # Für das Frontend
        # Hier wird der Ort definiert, an dem die statischen Dateien des Frontends gespeichert sind.
        # Der Root-Pfad ist /usr/share/nginx/html, was der Standardpfad für NGINX ist.
        # Der Index ist die Startseite, die geladen wird, wenn der Benutzer die Website besucht.
        # Der try_files-Befehl versucht, die angeforderte Datei zu finden. Wenn sie nicht gefunden wird, wird die index.html geladen.
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        ## Ich hatte überlegt das ganze via einer Backend Proxy zu machen, dies war jedoch nicht notwendig.

#       # Proxy für das Rust-Backend
#        location /api/ {
#            proxy_pass http://backend;
#            proxy_http_version 1.1;
#            # Leitet den ursprünglichen Host-Header an das Backend weiter, wichtig für Logging oder domainbasiertes Routing
#            proxy_set_header Host $host;
#            # Die API sieht die echte IP des Clients (nicht die von NGINX).
#            proxy_set_header X-Real-IP $remote_addr;
#            # Kette der realen IPs wird weitergegeben, z. B. bei Load Balancing wichtig.
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        }

        # Fehlerseiten konfiguration
        error_page 404 /404.html;
    }
}
